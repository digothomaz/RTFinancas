@helper Menu()
{     
    <script type="text/javascript">
        $(function () {

            var icons = {
                header: "ui-icon-circle-arrow-e",
                activeHeader: "ui-icon-circle-arrow-s"
            };

            $(".menuaccordion").accordion({
                heightStyle: "content",
                event: "click hoverintent",
                icons: icons,
                active: false,
                collapsible: true
            });
        });        

        var cfg = ($.hoverintent = {
            sensitivity: 7,
            interval: 100
        });

        $.event.special.hoverintent = {
            setup: function () {
                $(this).bind("mouseover", jQuery.event.special.hoverintent.handler);
            },
            teardown: function () {
                $(this).unbind("mouseover", jQuery.event.special.hoverintent.handler);
            },
            handler: function (event) {
                var that = this,
            args = arguments,
            target = $(event.target),
            cX, cY, pX, pY;

                function track(event) {
                    cX = event.pageX;
                    cY = event.pageY;
                };
                pX = event.pageX;
                pY = event.pageY;
                function clear() {
                    target
              .unbind("mousemove", track)
              .unbind("mouseout", arguments.callee);
                    clearTimeout(timeout);
                }
                function handler() {
                    if ((Math.abs(pX - cX) + Math.abs(pY - cY)) < cfg.sensitivity) {
                        clear();
                        event.type = "hoverintent";
                        // prevent accessing the original event since the new event
                        // is fired asynchronously and the old event is no longer
                        // usable (#6028)
                        event.originalEvent = {};
                        jQuery.event.handle.apply(that, args);
                    } else {
                        pX = cX;
                        pY = cY;
                        timeout = setTimeout(handler, cfg.interval);
                    }
                }
                var timeout = setTimeout(handler, cfg.interval);
                target.mousemove(track).mouseout(clear);
                return true;
            }
        };        

      </script>
        
    
	<div class="menuaccordion">
        
        @{    
            if (HttpContext.Current.User.Identity.IsAuthenticated)
            {
                foreach (SiteMapNode item in SiteMap.RootNode.ChildNodes)
                {
                    @Menu(item)
                }
            }
        }		
	</div>
}

@helper Menu(SiteMapNode node)
    {    
        string cssClass = string.Empty;
        string href;
        string title = node.Description;
        string link = node.Title;
        string style = string.Empty;

        if (node.ChildNodes.Count > 0 || node.ParentNode.Equals(SiteMap.RootNode))
        {
            href = node.ChildNodes.Count > 0 ? "#" : VirtualPathUtility.ToAbsolute(node.Url);
            cssClass = string.Format("nav-top-item{0}", (node.ChildNodes.Count == 0 ? " no-submenu" : string.Empty));
            style = "padding-right: 27px;";
        }
        else
        {
            href = VirtualPathUtility.ToAbsolute(node.Url);
        }

        if (SiteMap.CurrentNode != null && SiteMap.CurrentNode.Url == node.Url)
        {
            cssClass = string.Format("{0} current", cssClass).Trim(); 
            
            <input id="currentMenuNode" type="hidden" value="7"/>        
        }
    
     <a class="@cssClass" href="@href" title="@title" style="@style">@link</a>
     <div>
        @if (node.ChildNodes.Count > 0)
        {
            foreach (SiteMapNode item in node.ChildNodes)
            {
                @Menu(item)
            }
        }
     </div>   
}